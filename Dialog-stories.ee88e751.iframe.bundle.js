"use strict";(self.webpackChunkstorybook=self.webpackChunkstorybook||[]).push([[583],{"./stories/Dialog.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/jsx-runtime.js"),react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/index.js"),_src__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("../src/index.ts");const __WEBPACK_DEFAULT_EXPORT__={title:"Components/Dialog",component:_src__WEBPACK_IMPORTED_MODULE_2__.lG},Default=(args=>{const[isGlobalOpen,setIsGlobalOpen]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(!1),[isInlineOpen,setIsInlineOpen]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(!1),parentRef=(0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("div",{ref:parentRef,id:"dialog-parent",style:{position:"relative",height:300},children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("div",{style:{display:"flex",gap:10},children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_src__WEBPACK_IMPORTED_MODULE_2__.$n,{onClick:()=>setIsGlobalOpen(!0),children:"Open Global Dialog"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_src__WEBPACK_IMPORTED_MODULE_2__.$n,{onClick:()=>setIsInlineOpen(!0),children:"Open Inline Dialog"})]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_src__WEBPACK_IMPORTED_MODULE_2__.lG,{...args,title:"Dialog",open:isInlineOpen,parentRef,onCloseDialog:()=>setIsInlineOpen(!1),children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("p",{children:"This is the inline dialog content!"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_src__WEBPACK_IMPORTED_MODULE_2__.$n,{onClick:()=>setIsInlineOpen(!1),children:"Close Dialog"})]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_src__WEBPACK_IMPORTED_MODULE_2__.lG,{...args,title:"Global Dialog",open:isGlobalOpen,showBackLink:!1,onCloseDialog:()=>setIsGlobalOpen(!1),children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("p",{children:"This is the global dialog content!"})})]})}).bind({});Default.args={contentHeight:"200px",maxWidth:"400px",backLinkCaption:"Back",showOverlay:!0,showBackLink:!0,showCloseButton:!0,onBackClick:()=>alert("Back clicked!")};const __namedExportsOrder=["Default"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"args => {\n  const [isGlobalOpen, setIsGlobalOpen] = useState(false);\n  const [isInlineOpen, setIsInlineOpen] = useState(false);\n  const parentRef = useRef<HTMLDivElement | null>(null);\n  return <div ref={parentRef} id={'dialog-parent'} style={{\n    position: 'relative',\n    height: 300\n  }}>\n            <div style={{\n      display: 'flex',\n      gap: 10\n    }}>\n                <Button onClick={() => setIsGlobalOpen(true)}>Open Global Dialog</Button>\n                <Button onClick={() => setIsInlineOpen(true)}>Open Inline Dialog</Button>\n            </div>\n\n            <Dialog {...args} title={'Dialog'} open={isInlineOpen} parentRef={parentRef} onCloseDialog={() => setIsInlineOpen(false)}>\n                <p>This is the inline dialog content!</p>\n                <Button onClick={() => setIsInlineOpen(false)}>Close Dialog</Button>\n            </Dialog>\n\n            <Dialog {...args} title={'Global Dialog'} open={isGlobalOpen} showBackLink={false} onCloseDialog={() => setIsGlobalOpen(false)}>\n                <p>This is the global dialog content!</p>\n            </Dialog>\n        </div>;\n}",...Default.parameters?.docs?.source}}}}}]);