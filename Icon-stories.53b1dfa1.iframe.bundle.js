"use strict";(self.webpackChunkstorybook=self.webpackChunkstorybook||[]).push([[96],{"./stories/Icon.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AllIcons:()=>AllIcons,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/jsx-runtime.js"),react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/index.js"),_src__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("../src/index.ts");const __WEBPACK_DEFAULT_EXPORT__={title:"Components/Icon",component:_src__WEBPACK_IMPORTED_MODULE_2__.In,argTypes:{fill:{control:"color"}}},AllIcons=({fill})=>{const[search,setSearch]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(""),[copied,setCopied]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null),filteredIcons=Object.keys(_src__WEBPACK_IMPORTED_MODULE_2__.kj).filter(name=>name.toLowerCase().includes(search.toLowerCase()));return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("div",{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div",{style:{marginBottom:"16px"},children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("input",{type:"text",placeholder:"Search icons...",value:search,onChange:e=>setSearch(e.target.value),style:{padding:"8px",fontSize:"14px",border:"1px solid #ccc",borderRadius:"4px",width:"100%",maxWidth:"300px",marginBottom:"20px"}})}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div",{style:{display:"flex",flexWrap:"wrap",gap:"16px"},children:filteredIcons.length>0?filteredIcons.map(name=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("div",{style:{width:"12%",textAlign:"center",cursor:"pointer"},onClick:()=>(async name=>{await navigator.clipboard.writeText(name),setCopied(name),setTimeout(()=>setCopied(null),2e3)})(name),children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_src__WEBPACK_IMPORTED_MODULE_2__.In,{name,style:{width:24,height:24},fill}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div",{style:{marginTop:"8px",fontSize:"11px",color:"#555"},children:name}),copied===name&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div",{style:{fontSize:"10px",color:"green"},children:"Copied!"})]},name)):(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("p",{children:"No icons found"})})]})},__namedExportsOrder=["AllIcons"];AllIcons.parameters={...AllIcons.parameters,docs:{...AllIcons.parameters?.docs,source:{originalSource:"({\n  fill\n}) => {\n  const [search, setSearch] = useState(''); // State for handling search input\n  const [copied, setCopied] = useState<string | null>(null); // State to track the last copied icon name\n\n  // Function to copy icon name to clipboard\n  const copyToClipboard = async (name: string) => {\n    await navigator.clipboard.writeText(name); // Copy the icon name\n    setCopied(name); // Update the state with the copied icon name\n    setTimeout(() => setCopied(null), 2000); // Clear the copied state after 2 seconds\n  };\n\n  // Filter the icons based on the search input\n  const filteredIcons = Object.keys(iconNames).filter(name => name.toLowerCase().includes(search.toLowerCase()));\n  return <div>\n            {/* Search input */}\n            <div style={{\n      marginBottom: '16px'\n    }}>\n                <input type='text' placeholder='Search icons...' value={search} onChange={e => setSearch(e.target.value)} style={{\n        padding: '8px',\n        fontSize: '14px',\n        border: '1px solid #ccc',\n        borderRadius: '4px',\n        width: '100%',\n        maxWidth: '300px',\n        marginBottom: '20px'\n      }} />\n            </div>\n\n            {/* Display all filtered icons */}\n            <div style={{\n      display: 'flex',\n      flexWrap: 'wrap',\n      gap: '16px'\n    }}>\n                {filteredIcons.length > 0 ? filteredIcons.map(name => <div key={name} style={{\n        width: '12%',\n        textAlign: 'center',\n        cursor: 'pointer' // Make icons clickable\n      }} onClick={() => copyToClipboard(name)} // Copy the icon name when clicked\n      >\n                            {/* Icon component */}\n                            <Icon name={name as IconTypes} style={{\n          width: 24,\n          height: 24\n        }} fill={fill} />\n                            {/* Display the name of the icon */}\n                            <div style={{\n          marginTop: '8px',\n          fontSize: '11px',\n          color: '#555'\n        }}>{name}</div>\n                            {/* Show \"Copied!\" message when an icon is clicked */}\n                            {copied === name && <div style={{\n          fontSize: '10px',\n          color: 'green'\n        }}>Copied!</div>}\n                        </div>) : <p>No icons found</p>}\n            </div>\n        </div>;\n}",...AllIcons.parameters?.docs?.source}}}}}]);